{"repo_token":"d4R1HoKFsj78eZpljaRggmwzHuVvn1upV","git":{"branch":"master","head":{"id":"a6d55b3240e8af6c077a009ad7feb6f604802350","author_name":"dederobert","author_email":"adinquer@yahoo.com","committer_name":"dederobert","committer_email":"adinquer@yahoo.com","message":"cs fix 3"},"remotes":[{"name":"origin","url":"https:\/\/github.com\/dederobert\/dusk-rebuild.git"}]},"run_at":"2018-08-25 12:54:52 +0000","source_files":[{"name":"src\/Controller.php","source":"<?php\n\nnamespace DuskPHP\\Core;\n\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass Controller implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $query = $request->getQueryParams();\n        $controllerName = '\\\\DuskPHP\\\\Core\\\\Controller\\\\' . ucfirst($query['controller']) . 'Controller';\n        $ret = \\call_user_func([$controllerName, $query['action']]);\n        $response = new Response();\n        $response->getBody()->write($ret);\n\n        return $response;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,0,0,null,0,0,null]},{"name":"src\/Controller\/PagesController.php","source":"<?php\n\nnamespace DuskPHP\\Core\\Controller;\n\nclass PagesController\n{\n    public function view(array $params = []): string\n    {\n        return file_get_contents('assets\/views\/pages\/test.html');\n    }\n}","coverage":[null,null,null,null,null,null,null,0,0,0,null]},{"name":"src\/Dispatcher.php","source":"<?php\n\nnamespace DuskPHP\\Core;\n\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass Dispatcher implements RequestHandlerInterface\n{\n    \/**\n     * @var array\n     *\/\n    private $middlewares = [];\n\n    private $index = 0;\n\n    private $response;\n\n    public function __construct()\n    {\n        $this->response = new Response();\n    }\n\n    public function pipe(MiddlewareInterface $middleware): self\n    {\n        $this->middlewares[] = $middleware;\n\n        return $this;\n    }\n\n    public function handle(ServerRequestInterface $request): ResponseInterface\n    {\n        $middleware = $this->getMiddleware();\n        ++$this->index;\n\n        if (null === $middleware) {\n            return $this->response;\n        }\n\n        if ($middleware instanceof MiddlewareInterface) {\n            return $middleware->process($request, $this);\n        }\n    }\n\n    private function getMiddleware(): MiddlewareInterface\n    {\n        if (isset($this->middlewares[$this->index])) {\n            return $this->middlewares[$this->index];\n        }\n\n        return new \\DuskPHP\\Core\\Errors\\Controller500();\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,null,0,0,null,0,0,null,null,0,0,0,null,0,0,0,null,0,0,0,0,null,null,0,0,0,0,null,0,0,null]},{"name":"src\/Errors\/Controller404.php","source":"<?php\n\nnamespace DuskPHP\\Core\\Errors;\n\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass Controller404 implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = new Response();\n        $response->getBody()->write('<h1 style=\"color: red;text-align:center;\">Oups, page not found !<\/h1>');\n        $response->withStatus(404);\n\n        return $response;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null]},{"name":"src\/Errors\/Controller500.php","source":"<?php\n\nnamespace DuskPHP\\Core\\Errors;\n\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass Controller500 implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = new Response();\n        $response->getBody()->write('<h1 style=\"color: red;text-align:center;\">Oups, An error has occured !<\/h1>');\n        $response->withStatus(500);\n\n        return $response;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,0,0,null]},{"name":"src\/HomePage.php","source":"<?php\n\nnamespace DuskPHP\\Core;\n\nuse GuzzleHttp\\Psr7\\Response;\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass HomePage implements MiddlewareInterface\n{\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $response = new Response();\n        $response->getBody()->write('<h1>Hello from HomePage<\/h1>');\n\n        return $response;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,null,0,0,null]},{"name":"src\/Router\/Method.php","source":"<?php","coverage":[null]},{"name":"src\/Router\/Route.php","source":"<?php\n\nnamespace DuskPHP\\Core\\Router;\n\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\n\nclass Route\n{\n    private $path;\n    private $middleware;\n    private $name;\n    private $method;\n\n    public function __construct()\n    {\n    }\n\n    public function match(ServerRequestInterface &$request): bool\n    {\n        \/\/On retire les \/ en d\u00e9but et fin d'url\n        $url = trim($request->getQueryParams()['url'], '\/');\n\n        \/\/On cherche toute les cha\u00eenes de caract\u00e8res entour\u00e9 de '$'\n        preg_match_all(\"\\$[\\w]+\\$\", $this->path, $matches);\n\n        \/\/Si l'url ne contient pas de param\u00e8tres entre '$' alors on fait un simple comparaison\n        if (empty($matches[0])) {\n            return $url === trim($this->path, '\/');\n        }\n\n        \/\/Si l'url contient un param\u00e8tre variadique '...',\n        \/\/alors on v\u00e9rifie que l'on est suffisament d'\u00e9l\u00e9m\u00e9nt dans la requ\u00eate\n        if (1 === preg_match('#\\.\\.\\.$#', $this->path)) {\n            if (\\count(explode('\/', $url)) >= \\count($matches[0])) {\n                $this->parse($request, $matches, $url);\n\n                return true;\n            }\n\n            return false;\n        }\n\n        if (\\count(explode('\/', $url)) === \\count($matches[0])) {\n            $request = $this->parse($request, $matches, $url);\n\n            return true;\n        }\n\n        return false;\n    }\n\n    private function parse(ServerRequestInterface &$request, array $matches, string $url)\n    {\n        $query = $request->getQueryParams();\n        $url_explode = explode('\/', $url);\n        foreach ($matches[0] as $index => $value) {\n            $query[$value] = $url_explode[$index];\n        }\n        $request = $request->withQueryParams($query);\n    }\n\n    public function __get($name)\n    {\n        switch ($name) {\n            case 'path':\n                return $this->path;\n            case 'middleware':\n                return $this->middleware;\n            case 'name':\n                return $this->name;\n            case 'method':\n                return $this->method;\n        }\n    }\n\n    public function path(string $path): self\n    {\n        $this->path = $path;\n\n        return $this;\n    }\n\n    public function middleware(MiddlewareInterface $middleware): self\n    {\n        $this->middleware = $middleware;\n\n        return $this;\n    }\n\n    public function name(string $name): self\n    {\n        $this->name = $name;\n\n        return $this;\n    }\n\n    public function method(string $method): self\n    {\n        $this->method = $method;\n\n        return $this;\n    }\n\n    public function isNamed(): bool\n    {\n        return !(null === $this->name) && !empty($this->name);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,0,null,null,0,null,null,0,0,null,null,null,null,0,0,0,null,0,null,null,0,null,null,0,0,null,0,null,null,0,null,null,null,null,0,0,0,0,null,0,0,null,null,null,1,1,0,1,0,1,1,1,1,null,0,null,null,null,1,null,1,null,null,null,null,0,null,0,null,null,null,null,1,null,1,null,null,null,null,0,null,0,null,null,null,null,1,null,null]},{"name":"src\/Router\/Router.php","source":"<?php\n\nnamespace DuskPHP\\Core\\Router;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass Router implements MiddlewareInterface\n{\n    public function pipe(Route $route): self\n    {\n        $this->routes[$route->method][] = $route;\n        if ($route->isNamed()) {\n            $this->namedRoutes[$route->name] = $route;\n        } else {\n            throw new \\Exception(\"The name's route must be defined\");\n        }\n\n        return $this;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        if (!isset($this->routes[$request->getMethod()])) {\n            throw new RouterException('The method ' . $request->getMethod() . \" doesn't exist\");\n        }\n        foreach ($this->routes[$request->getMethod()] as $route) {\n            if ($route->match($request)) {\n                return $route->middleware->process($request, $handler);\n            }\n        }\n        $m = new \\DuskPHP\\Core\\Errors\\Controller404();\n\n        return $m->process($request, $handler);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,0,null,null,1,null,null,null,null,0,0,null,0,0,0,null,null,0,null,0,null,null]},{"name":"src\/i18n\/I18n.php","source":"<?php\n\nnamespace DuskPHP\\Core\\i18n;\n\nuse Psr\\Http\\Message\\ResponseInterface;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse Psr\\Http\\Server\\MiddlewareInterface;\nuse Psr\\Http\\Server\\RequestHandlerInterface;\n\nclass I18n implements MiddlewareInterface\n{\n    private $default_lang;\n    private $langs = [];\n\n    public function __construct(string $default_lang)\n    {\n        $this->default_lang = $default_lang;\n        $this->langs[] = $default_lang;\n    }\n\n    public function pipe(string $lang): self\n    {\n        if (!\\in_array($lang, $this->langs, true)) {\n            $this->langs[] = $lang;\n        }\n\n        return $this;\n    }\n\n    public function process(ServerRequestInterface $request, RequestHandlerInterface $handler): ResponseInterface\n    {\n        $lang = explode('\/', $request->getQueryParams()['url'])[0];\n        $query = $request->getQueryParams();\n        if (!\\in_array($lang, $this->langs, true)) {\n            $lang = $this->default_lang;\n        } else {\n            \/\/Remove the lang params in url\n            $query['url'] = substr_replace($query['url'], '', 0, mb_strlen($lang) + 1);\n        }\n        $query['lang'] = $lang;\n        $request = $request->withQueryParams($query);\n\n        $response = $handler->handle($request);\n        \/\/TODO Translate $response\n        $response->getBody()->write('LANG : ' . $lang);\n\n        return $response;\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,0,0,0,0,null,null,0,0,0,0,null,0,0,null,null,0,0,0,0,0,0,null,0,0,0,0,null,0,null,0,null,0,0,null]},{"name":"tests\/RouterTest.php","source":"<?php\n\nnamespace DuskPHP\\Core\\Test;\n\nuse DuskPHP\\Core\\Router\\Router;\nuse Interop\\Http\\ServerMiddleware\\MiddlewareInterface;\nuse PHPUnit\\Framework\\TestCase;\n\nclass RouterTest extends TestCase\n{\n    private function makeRouter()\n    {\n        return new Router();\n    }\n\n    private function makeMiddleware()\n    {\n        $middleware = $this->getMockBuilder(MiddlewareInterface::class)->getMock();\n\n        return $middleware;\n    }\n\n    public function testPipe()\n    {\n        $router = $this->makeRouter();\n        $route = new \\DuskPHP\\Core\\Router\\Route();\n        $route->path('\/')\n            ->name('test');\n        $router->pipe($route);\n        $this->assertInstanceOf(Router::class, $router);\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,1,null,null,null,null,0,null,0,null,null,null,null,1,1,1,1,1,1,1,null]}],"environment":{"packagist_version":"2.1.0"}}